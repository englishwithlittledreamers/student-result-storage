const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs'); // Node.js built-in module for file system operations

const app = express();
const port = 3000; // You can change this port if 3000 is in use

// --- Multer Configuration for File Uploads ---
// Sets up where the uploaded files will be stored and how they will be named.
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadPath = path.join(__dirname, 'uploads'); // 'uploads' folder in the same directory as server.js
        // Ensure the 'uploads' directory exists. If not, create it.
        fs.mkdir(uploadPath, { recursive: true }, (err) => {
            if (err) {
                console.error('Failed to create upload directory:', err);
                return cb(err);
            }
            cb(null, uploadPath);
        });
    },
    filename: (req, file, cb) => {
        // Generate a unique filename using timestamp and a random number
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        // Get the original file extension (e.g., .pdf)
        const fileExtension = path.extname(file.originalname);
        // Combine them to create a unique filename
        cb(null, file.fieldname + '-' + uniqueSuffix + fileExtension);
    }
});

// Initialize multer with the configured storage
const upload = multer({
    storage: storage,
    // Optional: Add file filter to accept only PDFs
    fileFilter: (req, file, cb) => {
        if (file.mimetype === 'application/pdf') {
            cb(null, true); // Accept the file
        } else {
            cb(new Error('Only PDF files are allowed!'), false); // Reject the file
        }
    },
    // Optional: Limit file size (e.g., 5MB)
    limits: {
        fileSize: 5 * 1024 * 1024 // 5 Megabytes
    }
});

// --- Express Middleware and Routes ---

// 1. Serve static files from the 'public' directory
// This allows your browser to load index.html, CSS, and client-side JS.
// When you visit http://localhost:3000/, it will serve public/index.html by default.
app.use(express.static(path.join(__dirname, 'public')));

// 2. Handle PDF uploads at the '/upload-pdf' endpoint
// `upload.single('pdfFile')` tells Multer to expect a single file upload
// where the field name in the FormData is 'pdfFile'.
app.post('/upload-pdf', upload.single('pdfFile'), (req, res) => {
    // Check if a file was actually uploaded
    if (!req.file) {
        return res.status(400).json({ error: 'No PDF file uploaded or file type is not allowed.' });
    }

    // The file information is available in req.file
    // req.file.filename: The unique filename generated by Multer
    // req.file.path: The full path where the file is saved on the server
    const fileUrl = `/uploads/${req.file.filename}`; // This is the URL path where the PDF can be accessed

    console.log(`PDF uploaded: ${req.file.filename} saved to ${req.file.path}`);

    // Send a success response back to the client, including the URL of the saved file
    res.status(200).json({
        message: 'PDF uploaded successfully!',
        filename: req.file.filename,
        fileUrl: fileUrl // This URL can be used by the client to view the uploaded PDF
    });
});

// 3. Serve uploaded files statically from the 'uploads' directory
// This makes the files in the 'uploads' folder accessible via the '/uploads' URL path.
// E.g., if a file 'my-report.pdf' is in 'uploads', you can access it at http://localhost:3000/uploads/my-report.pdf
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// --- Start the Server ---
app.listen(port, () => {
    console.log(`Server listening on port ${port}`);
    console.log(`Access your application at: http://localhost:${port}`);
    console.log(`Uploaded PDFs will be accessible under: http://localhost:${port}/uploads/`);
});